Index: src/controller/ButtonAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controler;\r\n\r\nimport model.InvoiceHeader;\r\nimport model.InvoiceLines;\r\nimport view.InvoiceFrame;\r\nimport view.NewInvoiceDialog;\r\nimport javax.swing.*;\r\nimport javax.swing.table.DefaultTableModel;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.io.*;\r\nimport java.text.ParseException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\n\r\npublic class ActionHandler implements ActionListener {\r\n\r\n    // == Fields ==\r\n    NewInvoiceDialog invoiceDialog;\r\n    @Override\r\n    public void actionPerformed(ActionEvent e) {\r\n\r\n        switch (e.getActionCommand()) {\r\n\r\n            case \"Load File\":\r\n                loadFile();\r\n                break;\r\n            case \"Save File\":\r\n                saveFile();\r\n                break;\r\n            case \"Create New Invoice\":\r\n                createNewInvoice();\r\n                break;\r\n            case \"Delete Invoice\":\r\n                deleteInvoice();\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\n    public static ArrayList<InvoiceHeader> readFile() {\r\n        ArrayList<InvoiceHeader> invoices = new ArrayList<>();\r\n        String invoiceHeaderFilePath = \"resources\\\\InvoiceHeader.csv\";\r\n        String invoiceLineFilePath = \"resources\\\\InvoiceLine.csv\";\r\n        BufferedReader reader = null;\r\n        String line;\r\n        try {\r\n            reader = new BufferedReader(new FileReader(invoiceHeaderFilePath));\r\n            while ((line = reader.readLine()) != null) {\r\n                InvoiceHeader invoice;\r\n                String[] row = line.split(\",\");\r\n                SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n                Date date = sdf.parse(row[1]);\r\n                invoice = new InvoiceHeader(Integer.parseInt(row[0]), date, row[2]);\r\n                ArrayList<InvoiceLines> invoiceItems = getItemsForInvoice(invoice, invoiceLineFilePath);\r\n                invoice.setInvoiceLines(invoiceItems);\r\n                invoices.add(invoice);\r\n            }\r\n        } catch (FileNotFoundException ex) {\r\n            System.out.println(\"File is not found with this path\");\r\n            ex.printStackTrace();\r\n        } catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        } catch (ParseException ex) {\r\n            ex.printStackTrace();\r\n        } finally {\r\n            try {\r\n                reader.close();\r\n            } catch (IOException ex) {\r\n                ex.printStackTrace();\r\n            }\r\n        }\r\n\r\n        return invoices;\r\n    }\r\n\r\n    public static ArrayList<InvoiceHeader> readFile(String invoicesFilePath, String itemsFilePath) {\r\n        ArrayList<InvoiceHeader> invoices = new ArrayList<>();\r\n\r\n        BufferedReader reader = null;\r\n        String line;\r\n        try {\r\n            reader = new BufferedReader(new FileReader(invoicesFilePath));\r\n            while ((line = reader.readLine()) != null) {\r\n                InvoiceHeader invoice;\r\n                String[] row = line.split(\",\");\r\n                SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n                Date date = sdf.parse(row[1]);\r\n                invoice = new InvoiceHeader(Integer.parseInt(row[0]), date, row[2]);\r\n                ArrayList<InvoiceLines> invoiceItems = getItemsForInvoice(invoice, itemsFilePath);\r\n                invoice.setInvoiceLines(invoiceItems);\r\n                invoices.add(invoice);\r\n            }\r\n        } catch (FileNotFoundException ex) {\r\n            System.out.println(\"File is not found with this path\");\r\n            ex.printStackTrace();\r\n        } catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        } catch (ParseException ex) {\r\n            ex.printStackTrace();\r\n        } finally {\r\n            try {\r\n                reader.close();\r\n            } catch (IOException ex) {\r\n                ex.printStackTrace();\r\n            }\r\n        }\r\n\r\n        return invoices;\r\n    }\r\n\r\n    public static void writeFile(ArrayList<InvoiceHeader> invoices) {\r\n\r\n        String invoiceHeaderFilePath = \"resources\\\\Invoices.csv\";\r\n        String invoiceLineFilePath = \"resources\\\\InvoiceItems.csv\";\r\n        PrintWriter headerWriter = null;\r\n        PrintWriter lineWriter = null;\r\n\r\n        try {\r\n\r\n            headerWriter = getFileWriter(invoiceHeaderFilePath);\r\n            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n\r\n            for (InvoiceHeader invoice : invoices) {\r\n                String formattedDate = sdf.format(invoice.getInvoiceDate());\r\n                headerWriter.println(invoice.getInvoiceNum() + \",\" + formattedDate + \",\" + invoice.getCustomerName());\r\n            }\r\n\r\n            headerWriter.flush();\r\n\r\n            lineWriter = getFileWriter(invoiceLineFilePath);\r\n            ArrayList<InvoiceLines> invoiceItems;\r\n\r\n            for (InvoiceHeader invoice : invoices) {\r\n                invoiceItems = invoice.getInvoiceLines();\r\n                for (InvoiceLines item : invoiceItems) {\r\n                    lineWriter.println(invoice.getInvoiceNum() + \",\" + item.getItemName() + \",\"\r\n                            + String.valueOf(item.getItemPrice()) + \",\" + String.valueOf(item.getCount()));\r\n                }\r\n\r\n            }\r\n\r\n            lineWriter.flush();\r\n\r\n        } catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        } finally {\r\n            headerWriter.close();\r\n            lineWriter.close();\r\n        }\r\n\r\n    }\r\n\r\n    public static void writeFile(ArrayList<InvoiceHeader> invoices, String invoicesFilePath, String itemsFilePath) {\r\n\r\n        PrintWriter headerWriter = null;\r\n        PrintWriter lineWriter = null;\r\n\r\n        try {\r\n\r\n            headerWriter = getFileWriter(invoicesFilePath);\r\n            SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n\r\n            for (InvoiceHeader invoice : invoices) {\r\n                String formattedDate = sdf.format(invoice.getInvoiceDate());\r\n                headerWriter.println(invoice.getInvoiceNum() + \",\" + formattedDate + \",\" + invoice.getCustomerName());\r\n            }\r\n\r\n            headerWriter.flush();\r\n\r\n            lineWriter = getFileWriter(itemsFilePath);\r\n            ArrayList<InvoiceLines> invoiceItems;\r\n\r\n            for (InvoiceHeader invoice : invoices) {\r\n                invoiceItems = invoice.getInvoiceLines();\r\n                for (InvoiceLines item : invoiceItems) {\r\n                    lineWriter.println(invoice.getInvoiceNum() + \",\" + item.getItemName() + \",\"\r\n                            + String.valueOf(item.getItemPrice()) + \",\" + String.valueOf(item.getCount()));\r\n                }\r\n\r\n            }\r\n\r\n            lineWriter.flush();\r\n\r\n        } catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        } finally {\r\n            headerWriter.close();\r\n            lineWriter.close();\r\n        }\r\n\r\n    }\r\n\r\n    // Helper Method to organize the code in a good way ( Retrieve items for each invoice)\r\n    private static ArrayList<InvoiceLines> getItemsForInvoice(InvoiceHeader invoice, String filePath) {\r\n        ArrayList<InvoiceLines> invoiceItems = new ArrayList<>();\r\n        BufferedReader reader = null;\r\n        String line;\r\n        try {\r\n            reader = new BufferedReader(new FileReader(filePath));\r\n            while ((line = reader.readLine()) != null) {\r\n                String[] row = line.split(\",\");\r\n                int num = Integer.parseInt(row[0]);\r\n                if (num == invoice.getInvoiceNum()) {\r\n                    invoiceItems.add(new InvoiceLines(invoice, row[1],\r\n                            Double.parseDouble(row[2]), Integer.parseInt(row[3])));\r\n                }\r\n\r\n            }\r\n        } catch (FileNotFoundException ex) {\r\n            ex = new FileNotFoundException(\"File is not found with this path\");\r\n            ex.printStackTrace();\r\n        } catch (IOException ex) {\r\n            ex.printStackTrace();\r\n        } finally {\r\n            try {\r\n                reader.close();\r\n            } catch (IOException ex) {\r\n                ex.printStackTrace();\r\n            }\r\n        }\r\n\r\n        return invoiceItems;\r\n    }\r\n\r\n    // Helper Method to organize the code in a good way ( Retrieve writer for a specifc file path)\r\n    private static PrintWriter getFileWriter(String filePath) throws IOException {\r\n\r\n        return new PrintWriter(new BufferedWriter(new FileWriter(filePath)));\r\n    }\r\n    private void loadFile() {\r\n\r\n        String invoicesFilePath = null;\r\n        String itemsFilePath = null;\r\n\r\n        JFileChooser fc1 = new JFileChooser();\r\n        if (fc1.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {\r\n            invoicesFilePath = fc1.getSelectedFile().getPath();\r\n            boolean suffix = invoicesFilePath.endsWith(\"csv\");\r\n            if (!suffix) {\r\n                System.out.println(\"Files must be CSV file only\");\r\n                return;\r\n            }\r\n            System.out.println(\"Invoices CSV File is selected\");\r\n            System.out.println(\"******************************************\");\r\n        }\r\n\r\n        JFileChooser fc2 = new JFileChooser();\r\n        if (fc2.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {\r\n            itemsFilePath = fc2.getSelectedFile().getPath();\r\n            boolean suffix = itemsFilePath.endsWith(\"csv\");\r\n            if (!suffix) {\r\n                System.out.println(\"Files must be CSV file only\");\r\n                return;\r\n            }\r\n            System.out.println(\"Invoice's items CSV file is selected\");\r\n            System.out.println(\"******************************************\");\r\n        }\r\n\r\n        if (invoicesFilePath != null && itemsFilePath != null) {\r\n            InvoiceFrame.invoices = readFile(invoicesFilePath, itemsFilePath);\r\n            Object[][] table1Data = getInvoiceTableData(InvoiceFrame.invoices);\r\n            InvoiceFrame.invoicesTable.setModel(new DefaultTableModel(table1Data,\r\n                    new String[]{\"No.\", \"Date\", \"Customer\", \"Total\"}));\r\n\r\n            for (InvoiceHeader invoice : InvoiceFrame.invoices) {\r\n                System.out.println(invoice);\r\n                System.out.println(\"*********************************************\");\r\n            }\r\n        } else {\r\n            System.out.println(\"You must select two CSV files\");\r\n            System.out.println(\"*************************************************\");\r\n        }\r\n\r\n    }\r\n\r\n    private void saveFile() {\r\n\r\n        String invoicesFilePath = null;\r\n        String itemsFilePath = null;\r\n\r\n        JFileChooser fc1 = new JFileChooser();\r\n        if (fc1.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {\r\n            invoicesFilePath = fc1.getSelectedFile().getPath();\r\n            boolean suffix = invoicesFilePath.endsWith(\"csv\");\r\n            if (!suffix) {\r\n                System.out.println(\"Files must be CSV file only\");\r\n                return;\r\n            }\r\n            System.out.println(\"Invoices File is selected\");\r\n            System.out.println(\"******************************************\");\r\n        }\r\n\r\n        JFileChooser fc2 = new JFileChooser();\r\n        if (fc2.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {\r\n            itemsFilePath = fc2.getSelectedFile().getPath();\r\n            boolean suffix = itemsFilePath.endsWith(\"csv\");\r\n            if (!suffix) {\r\n                System.out.println(\"Files must be CSV file only\");\r\n                return;\r\n            }\r\n            System.out.println(\"Invoice's items file is selected\");\r\n            System.out.println(\"******************************************\");\r\n        }\r\n\r\n        if (invoicesFilePath != null && itemsFilePath != null) {\r\n            writeFile(InvoiceFrame.invoices, invoicesFilePath, itemsFilePath);\r\n\r\n        } else {\r\n            System.out.println(\"You must select two files\");\r\n            System.out.println(\"*************************************************\");\r\n        }\r\n    }\r\n\r\n    private void createNewInvoice() {\r\n\r\n        invoiceDialog = new NewInvoiceDialog(null, true);\r\n        invoiceDialog.setVisible(true);\r\n\r\n        int invoiceNum = InvoiceFrame.invoices.size() + 1;\r\n        String dateString = invoiceDialog.getInvoiceDate();\r\n        String customerName = invoiceDialog.getCustomerName();\r\n        SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n        try {\r\n            if (dateString != null && !(customerName.isEmpty())) {\r\n                Date invoiceDate = df.parse(dateString);\r\n                InvoiceHeader invoice = new InvoiceHeader(invoiceNum, invoiceDate, customerName);\r\n                InvoiceFrame.invoices.add(invoice);\r\n                Object[][] invoiceTableData = getInvoiceTableData(InvoiceFrame.invoices);\r\n                InvoiceFrame.invoicesTable.setModel(new DefaultTableModel(invoiceTableData,\r\n                        new String[]{\"No.\", \"Date\", \"Customer\", \"Total\"}));\r\n            } else {\r\n                System.out.println(\"You must insert date and customer name\");\r\n            }\r\n\r\n        } catch (ParseException ex) {\r\n            System.out.println(\"Incorrecet Date Format ====> It need to be (dd-MM-yyyy) \");\r\n            System.out.println(\"***********************************************************\");\r\n        }\r\n\r\n    }\r\n\r\n    private void deleteInvoice() {\r\n        if (InvoiceFrame.invoicesTable.getSelectedRow() >= 0)\r\n        {\r\n            InvoiceFrame.invoices.remove(InvoiceFrame.invoicesTable.getSelectedRow());\r\n            //coder : for loop invoices (arralist) .size ->  new num\r\n            for(int i = 0 ; i < InvoiceFrame.invoices.size();i++)\r\n            {\r\n                InvoiceFrame.invoices.get(i).setInvoiceNum(i+1);\r\n            }\r\n            Object[][] invoiceTableData = getInvoiceTableData(InvoiceFrame.invoices);\r\n            InvoiceFrame.invoicesTable.setModel(new DefaultTableModel(invoiceTableData,\r\n                    new String[]{\"No.\", \"Date\", \"Customer\", \"Total\"}));\r\n            InvoiceFrame.invoiceNumLbl.setText(\"0\");\r\n            InvoiceFrame.invoiceDateTxtField.setText(\"\");\r\n            InvoiceFrame.customerNameTxtField.setText(\"\");\r\n            InvoiceFrame.invoiceTotalLbl.setText(\"0.0\");\r\n            InvoiceFrame.itemsTable.setModel(new javax.swing.table.DefaultTableModel(\r\n                    new Object[][]{\r\n                            {null, null, null, null, null},\r\n                            {null, null, null, null, null},\r\n                            {null, null, null, null, null},\r\n                            {null, null, null, null, null},\r\n                            {null, null, null, null, null}\r\n                    },\r\n                    new String[]{\r\n                            \"No.\", \"Item Name\", \"Item Price\", \"Count\", \"Item Total\"\r\n                    }\r\n            ));\r\n        } else {\r\n            System.out.println(\"Select Invoice First\");\r\n            System.out.println(\"*****************************\");\r\n        }\r\n    }\r\n\r\n\r\n    // Helper Methods\r\n    private Object[][] getInvoiceTableData(ArrayList<InvoiceHeader> invoices) {\r\n\r\n        Object[][] tableData = new Object[invoices.size()][4];\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n\r\n        for (int i = 0; i < invoices.size(); i++) {\r\n            tableData[i][0] = invoices.get(i).getInvoiceNum();\r\n            tableData[i][1] = sdf.format(invoices.get(i).getInvoiceDate());\r\n            tableData[i][2] = invoices.get(i).getCustomerName();\r\n            double total = 0.0;\r\n            if (invoices.get(i).getInvoiceLines() != null) {\r\n                for (InvoiceLines item : invoices.get(i).getInvoiceLines()) {\r\n                    total += item.getItemPrice() * item.getCount();\r\n                }\r\n            }\r\n\r\n            tableData[i][3] = total;\r\n\r\n        }\r\n\r\n        return tableData;\r\n    }\r\n\r\n    private Object[][] getInvoiceItemsTableData(ArrayList<InvoiceLines> items) {\r\n\r\n        Object[][] tableData = new Object[items.size()][5];\r\n        for (int i = 0; i < items.size(); i++) {\r\n            tableData[i][0] = items.get(i).getInvoice().getInvoiceNum();\r\n            tableData[i][1] = items.get(i).getItemName();\r\n            tableData[i][2] = items.get(i).getItemPrice();\r\n            tableData[i][3] = items.get(i).getCount();\r\n            double itemTotal = items.get(i).getItemPrice() * items.get(i).getCount();\r\n            tableData[i][4] = itemTotal;\r\n\r\n        }\r\n\r\n        return tableData;\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/controller/ButtonAction.java b/src/controller/ButtonAction.java
--- a/src/controller/ButtonAction.java	(revision 36ea7b1b8064afe9f43cbf3196158918d44658a9)
+++ b/src/controller/ButtonAction.java	(date 1666302692127)
@@ -1,9 +1,9 @@
-package controler;
+package controller;
 
-import model.InvoiceHeader;
-import model.InvoiceLines;
-import view.InvoiceFrame;
-import view.NewInvoiceDialog;
+import model.HeaderTable;
+import model.LineTable;
+import view.SigInvoiceFrame;
+import view.AddNewInvoiceDialog;
 import javax.swing.*;
 import javax.swing.table.DefaultTableModel;
 import java.awt.event.ActionEvent;
@@ -14,10 +14,10 @@
 import java.util.ArrayList;
 import java.util.Date;
 
-public class ActionHandler implements ActionListener {
+public class ButtonAction implements ActionListener {
 
     // == Fields ==
-    NewInvoiceDialog invoiceDialog;
+    AddNewInvoiceDialog invoiceDialog;
     @Override
     public void actionPerformed(ActionEvent e) {
 
@@ -39,21 +39,21 @@
 
     }
 
-    public static ArrayList<InvoiceHeader> readFile() {
-        ArrayList<InvoiceHeader> invoices = new ArrayList<>();
-        String invoiceHeaderFilePath = "resources\\InvoiceHeader.csv";
+    public static ArrayList<HeaderTable> readFile() {
+        ArrayList<HeaderTable> invoices = new ArrayList<>();
+        String invoiceHeaderFilePath = "resources\\HeaderTable.csv";
         String invoiceLineFilePath = "resources\\InvoiceLine.csv";
         BufferedReader reader = null;
         String line;
         try {
             reader = new BufferedReader(new FileReader(invoiceHeaderFilePath));
             while ((line = reader.readLine()) != null) {
-                InvoiceHeader invoice;
+                HeaderTable invoice;
                 String[] row = line.split(",");
                 SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                 Date date = sdf.parse(row[1]);
-                invoice = new InvoiceHeader(Integer.parseInt(row[0]), date, row[2]);
-                ArrayList<InvoiceLines> invoiceItems = getItemsForInvoice(invoice, invoiceLineFilePath);
+                invoice = new HeaderTable(Integer.parseInt(row[0]), date, row[2]);
+                ArrayList<LineTable> invoiceItems = getItemsForInvoice(invoice, invoiceLineFilePath);
                 invoice.setInvoiceLines(invoiceItems);
                 invoices.add(invoice);
             }
@@ -75,20 +75,21 @@
         return invoices;
     }
 
-    public static ArrayList<InvoiceHeader> readFile(String invoicesFilePath, String itemsFilePath) {
-        ArrayList<InvoiceHeader> invoices = new ArrayList<>();
+    public static ArrayList<HeaderTable> readFile(String invoicesFilePath,
+                                                  String itemsFilePath) {
+        ArrayList<HeaderTable> invoices = new ArrayList<>();
 
         BufferedReader reader = null;
         String line;
         try {
             reader = new BufferedReader(new FileReader(invoicesFilePath));
             while ((line = reader.readLine()) != null) {
-                InvoiceHeader invoice;
+                HeaderTable invoice;
                 String[] row = line.split(",");
                 SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                 Date date = sdf.parse(row[1]);
-                invoice = new InvoiceHeader(Integer.parseInt(row[0]), date, row[2]);
-                ArrayList<InvoiceLines> invoiceItems = getItemsForInvoice(invoice, itemsFilePath);
+                invoice = new HeaderTable(Integer.parseInt(row[0]), date, row[2]);
+                ArrayList<LineTable> invoiceItems = getItemsForInvoice(invoice, itemsFilePath);
                 invoice.setInvoiceLines(invoiceItems);
                 invoices.add(invoice);
             }
@@ -110,7 +111,7 @@
         return invoices;
     }
 
-    public static void writeFile(ArrayList<InvoiceHeader> invoices) {
+    public static void writeFile(ArrayList<HeaderTable> invoices) {
 
         String invoiceHeaderFilePath = "resources\\Invoices.csv";
         String invoiceLineFilePath = "resources\\InvoiceItems.csv";
@@ -122,21 +123,23 @@
             headerWriter = getFileWriter(invoiceHeaderFilePath);
             SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
 
-            for (InvoiceHeader invoice : invoices) {
+            for (HeaderTable invoice : invoices) {
                 String formattedDate = sdf.format(invoice.getInvoiceDate());
-                headerWriter.println(invoice.getInvoiceNum() + "," + formattedDate + "," + invoice.getCustomerName());
+                headerWriter.println(invoice.getInvoiceNum() + "," + formattedDate
+                        + "," + invoice.getCustomerName());
             }
 
             headerWriter.flush();
 
             lineWriter = getFileWriter(invoiceLineFilePath);
-            ArrayList<InvoiceLines> invoiceItems;
+            ArrayList<LineTable> invoiceItems;
 
-            for (InvoiceHeader invoice : invoices) {
+            for (HeaderTable invoice : invoices) {
                 invoiceItems = invoice.getInvoiceLines();
-                for (InvoiceLines item : invoiceItems) {
+                for (LineTable item : invoiceItems) {
                     lineWriter.println(invoice.getInvoiceNum() + "," + item.getItemName() + ","
-                            + String.valueOf(item.getItemPrice()) + "," + String.valueOf(item.getCount()));
+                            + String.valueOf(item.getItemPrice()) + ","
+                            + String.valueOf(item.getCount()));
                 }
 
             }
@@ -152,7 +155,9 @@
 
     }
 
-    public static void writeFile(ArrayList<InvoiceHeader> invoices, String invoicesFilePath, String itemsFilePath) {
+    public static void writeFile(ArrayList<HeaderTable> invoices,
+                                 String invoicesFilePath,
+                                 String itemsFilePath) {
 
         PrintWriter headerWriter = null;
         PrintWriter lineWriter = null;
@@ -162,21 +167,23 @@
             headerWriter = getFileWriter(invoicesFilePath);
             SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
 
-            for (InvoiceHeader invoice : invoices) {
+            for (HeaderTable invoice : invoices) {
                 String formattedDate = sdf.format(invoice.getInvoiceDate());
-                headerWriter.println(invoice.getInvoiceNum() + "," + formattedDate + "," + invoice.getCustomerName());
+                headerWriter.println(invoice.getInvoiceNum() + "," + formattedDate
+                        + "," + invoice.getCustomerName());
             }
 
             headerWriter.flush();
 
             lineWriter = getFileWriter(itemsFilePath);
-            ArrayList<InvoiceLines> invoiceItems;
+            ArrayList<LineTable> invoiceItems;
 
-            for (InvoiceHeader invoice : invoices) {
+            for (HeaderTable invoice : invoices) {
                 invoiceItems = invoice.getInvoiceLines();
-                for (InvoiceLines item : invoiceItems) {
+                for (LineTable item : invoiceItems) {
                     lineWriter.println(invoice.getInvoiceNum() + "," + item.getItemName() + ","
-                            + String.valueOf(item.getItemPrice()) + "," + String.valueOf(item.getCount()));
+                            + String.valueOf(item.getItemPrice()) + ","
+                            + String.valueOf(item.getCount()));
                 }
 
             }
@@ -193,8 +200,8 @@
     }
 
     // Helper Method to organize the code in a good way ( Retrieve items for each invoice)
-    private static ArrayList<InvoiceLines> getItemsForInvoice(InvoiceHeader invoice, String filePath) {
-        ArrayList<InvoiceLines> invoiceItems = new ArrayList<>();
+    private static ArrayList<LineTable> getItemsForInvoice(HeaderTable invoice, String filePath) {
+        ArrayList<LineTable> invoiceItems = new ArrayList<>();
         BufferedReader reader = null;
         String line;
         try {
@@ -203,7 +210,7 @@
                 String[] row = line.split(",");
                 int num = Integer.parseInt(row[0]);
                 if (num == invoice.getInvoiceNum()) {
-                    invoiceItems.add(new InvoiceLines(invoice, row[1],
+                    invoiceItems.add(new LineTable(invoice, row[1],
                             Double.parseDouble(row[2]), Integer.parseInt(row[3])));
                 }
 
@@ -255,22 +262,21 @@
                 return;
             }
             System.out.println("Invoice's items CSV file is selected");
-            System.out.println("******************************************");
+            System.out.println("------------------------------------");
         }
 
         if (invoicesFilePath != null && itemsFilePath != null) {
-            InvoiceFrame.invoices = readFile(invoicesFilePath, itemsFilePath);
-            Object[][] table1Data = getInvoiceTableData(InvoiceFrame.invoices);
-            InvoiceFrame.invoicesTable.setModel(new DefaultTableModel(table1Data,
-                    new String[]{"No.", "Date", "Customer", "Total"}));
+            SigInvoiceFrame.invoices = readFile(invoicesFilePath, itemsFilePath);
+            Object[][] table1Data = getInvoiceTableData(SigInvoiceFrame.invoices);
+            SigInvoiceFrame.invoicesTable.setModel(new DefaultTableModel(table1Data,
+                    new String[]{"No.", "Date", "Customer Name", "Total"}));
 
-            for (InvoiceHeader invoice : InvoiceFrame.invoices) {
+            for (HeaderTable invoice : SigInvoiceFrame.invoices) {
                 System.out.println(invoice);
-                System.out.println("*********************************************");
+                System.out.println("--------------------------------");
             }
         } else {
-            System.out.println("You must select two CSV files");
-            System.out.println("*************************************************");
+            System.out.println("Please upload Header File then Line File with extension = .csv\n");
         }
 
     }
@@ -285,11 +291,11 @@
             invoicesFilePath = fc1.getSelectedFile().getPath();
             boolean suffix = invoicesFilePath.endsWith("csv");
             if (!suffix) {
-                System.out.println("Files must be CSV file only");
+                System.out.println("Line and Header Files should be with CSV extension only");
                 return;
             }
-            System.out.println("Invoices File is selected");
-            System.out.println("******************************************");
+            System.out.println("The Two Invoices File is selected successfully");
+            System.out.println("----------------------------------------------");
         }
 
         JFileChooser fc2 = new JFileChooser();
@@ -301,63 +307,61 @@
                 return;
             }
             System.out.println("Invoice's items file is selected");
-            System.out.println("******************************************");
+            System.out.println("------------------------------------");
         }
 
         if (invoicesFilePath != null && itemsFilePath != null) {
-            writeFile(InvoiceFrame.invoices, invoicesFilePath, itemsFilePath);
+            writeFile(SigInvoiceFrame.invoices, invoicesFilePath, itemsFilePath);
 
         } else {
-            System.out.println("You must select two files");
-            System.out.println("*************************************************");
+            System.out.println("You must select two files\n");
         }
     }
 
     private void createNewInvoice() {
 
-        invoiceDialog = new NewInvoiceDialog(null, true);
+        invoiceDialog = new AddNewInvoiceDialog(null, true);
         invoiceDialog.setVisible(true);
 
-        int invoiceNum = InvoiceFrame.invoices.size() + 1;
+        int invoiceNum = SigInvoiceFrame.invoices.size() + 1;
         String dateString = invoiceDialog.getInvoiceDate();
         String customerName = invoiceDialog.getCustomerName();
         SimpleDateFormat df = new SimpleDateFormat("dd-MM-yyyy");
         try {
             if (dateString != null && !(customerName.isEmpty())) {
                 Date invoiceDate = df.parse(dateString);
-                InvoiceHeader invoice = new InvoiceHeader(invoiceNum, invoiceDate, customerName);
-                InvoiceFrame.invoices.add(invoice);
-                Object[][] invoiceTableData = getInvoiceTableData(InvoiceFrame.invoices);
-                InvoiceFrame.invoicesTable.setModel(new DefaultTableModel(invoiceTableData,
-                        new String[]{"No.", "Date", "Customer", "Total"}));
+                HeaderTable invoice = new HeaderTable(invoiceNum, invoiceDate, customerName);
+                SigInvoiceFrame.invoices.add(invoice);
+                Object[][] invoiceTableData = getInvoiceTableData(SigInvoiceFrame.invoices);
+                SigInvoiceFrame.invoicesTable.setModel(new DefaultTableModel(invoiceTableData,
+                        new String[]{"No.", "Date", "Customer Name", "Total"}));
             } else {
-                System.out.println("You must insert date and customer name");
+                System.out.println("Please, Enter the Both Fields: Date & Customer Name");
             }
 
         } catch (ParseException ex) {
-            System.out.println("Incorrecet Date Format ====> It need to be (dd-MM-yyyy) ");
-            System.out.println("***********************************************************");
+            System.out.println("Date Format is Wrong Please,Enter it in the Following Format: dd-MM-yyyy \n");
         }
 
     }
 
     private void deleteInvoice() {
-        if (InvoiceFrame.invoicesTable.getSelectedRow() >= 0)
+        if (SigInvoiceFrame.invoicesTable.getSelectedRow() >= 0)
         {
-            InvoiceFrame.invoices.remove(InvoiceFrame.invoicesTable.getSelectedRow());
+            SigInvoiceFrame.invoices.remove(SigInvoiceFrame.invoicesTable.getSelectedRow());
             //coder : for loop invoices (arralist) .size ->  new num
-            for(int i = 0 ; i < InvoiceFrame.invoices.size();i++)
+            for(int i = 0; i < SigInvoiceFrame.invoices.size(); i++)
             {
-                InvoiceFrame.invoices.get(i).setInvoiceNum(i+1);
+                SigInvoiceFrame.invoices.get(i).setInvoiceNum(i+1);
             }
-            Object[][] invoiceTableData = getInvoiceTableData(InvoiceFrame.invoices);
-            InvoiceFrame.invoicesTable.setModel(new DefaultTableModel(invoiceTableData,
-                    new String[]{"No.", "Date", "Customer", "Total"}));
-            InvoiceFrame.invoiceNumLbl.setText("0");
-            InvoiceFrame.invoiceDateTxtField.setText("");
-            InvoiceFrame.customerNameTxtField.setText("");
-            InvoiceFrame.invoiceTotalLbl.setText("0.0");
-            InvoiceFrame.itemsTable.setModel(new javax.swing.table.DefaultTableModel(
+            Object[][] invoiceTableData = getInvoiceTableData(SigInvoiceFrame.invoices);
+            SigInvoiceFrame.invoicesTable.setModel(new DefaultTableModel(invoiceTableData,
+                    new String[]{"No.", "Date", "Customer Name", "Total"}));
+            SigInvoiceFrame.invoiceNumLbl.setText("0");
+            SigInvoiceFrame.invoiceDateTxtField.setText("");
+            SigInvoiceFrame.customerNameTxtField.setText("");
+            SigInvoiceFrame.invoiceTotalLbl.setText("0.0");
+            SigInvoiceFrame.itemsTable.setModel(new javax.swing.table.DefaultTableModel(
                     new Object[][]{
                             {null, null, null, null, null},
                             {null, null, null, null, null},
@@ -370,14 +374,14 @@
                     }
             ));
         } else {
-            System.out.println("Select Invoice First");
-            System.out.println("*****************************");
+            System.out.println("Select Invoice First from Header Table from Left  Side \n");
+
         }
     }
 
 
     // Helper Methods
-    private Object[][] getInvoiceTableData(ArrayList<InvoiceHeader> invoices) {
+    private Object[][] getInvoiceTableData(ArrayList<HeaderTable> invoices) {
 
         Object[][] tableData = new Object[invoices.size()][4];
         SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
@@ -388,7 +392,7 @@
             tableData[i][2] = invoices.get(i).getCustomerName();
             double total = 0.0;
             if (invoices.get(i).getInvoiceLines() != null) {
-                for (InvoiceLines item : invoices.get(i).getInvoiceLines()) {
+                for (LineTable item : invoices.get(i).getInvoiceLines()) {
                     total += item.getItemPrice() * item.getCount();
                 }
             }
@@ -400,7 +404,7 @@
         return tableData;
     }
 
-    private Object[][] getInvoiceItemsTableData(ArrayList<InvoiceLines> items) {
+    private Object[][] getInvoiceItemsTableData(ArrayList<LineTable> items) {
 
         Object[][] tableData = new Object[items.size()][5];
         for (int i = 0; i < items.size(); i++) {
Index: src/controller/MouseAction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package controller;\r\n\r\nimport model.InvoiceHeader;\r\nimport model.InvoiceLines;\r\nimport view.InvoiceFrame;\r\nimport javax.swing.table.DefaultTableModel;\r\nimport java.awt.event.MouseAdapter;\r\nimport java.awt.event.MouseEvent;\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\n\r\n\r\npublic class MouseHandler extends MouseAdapter {\r\n\r\n    @Override\r\n    public void mouseClicked(MouseEvent e) {\r\n\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n        int selectedInvoice = InvoiceFrame.invoicesTable.getSelectedRow() + 1;\r\n        ArrayList<InvoiceLines> invoiceItems;\r\n        for (InvoiceHeader invoice : InvoiceFrame.invoices) {\r\n            if (invoice.getInvoiceNum() == selectedInvoice) {\r\n\r\n                InvoiceFrame.invoiceNumLbl.setText(String.valueOf(invoice.getInvoiceNum()));\r\n                InvoiceFrame.invoiceDateTxtField.setText(sdf.format(invoice.getInvoiceDate()));\r\n                InvoiceFrame.customerNameTxtField.setText(invoice.getCustomerName());\r\n                double total = 0.0;\r\n                if (invoice.getInvoiceLines() != null) {\r\n                    for (InvoiceLines item : invoice.getInvoiceLines()) {\r\n                        total += item.getItemPrice() * item.getCount();\r\n                    }\r\n\r\n                    InvoiceFrame.invoiceTotalLbl.setText(String.valueOf(total));\r\n                    invoiceItems = invoice.getInvoiceLines();\r\n                    Object[][] table2Data = getInvoiceItemsTableData(invoiceItems);\r\n                    InvoiceFrame.itemsTable.setModel(new DefaultTableModel(table2Data,\r\n                            new String[]{\"No.\", \"Item Name\", \"Item Price\", \"Count\", \"Item Total\"}));\r\n                } else {\r\n                    InvoiceFrame.invoiceTotalLbl.setText(String.valueOf(total));\r\n\r\n                    InvoiceFrame.itemsTable.setModel(new javax.swing.table.DefaultTableModel(\r\n                            new Object[][]{\r\n\r\n                            },\r\n                            new String[]{\r\n                                    \"No.\", \"Item Name\", \"Item Price\", \"Count\", \"Item Total\"\r\n                            }\r\n                    ));\r\n\r\n                    InvoiceFrame.itemsTable.setModel(new DefaultTableModel(new Object[][]{},\r\n                            new String[]{\"No.\", \"Item Name\", \"Item Price\", \"Count\", \"Item Total\"}));\r\n\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    // Helper Method\r\n    private Object[][] getInvoiceItemsTableData(ArrayList<InvoiceLines> items) {\r\n\r\n        Object[][] tableData = new Object[items.size()][5];\r\n        for (int i = 0; i < items.size(); i++) {\r\n            tableData[i][0] = items.get(i).getInvoice().getInvoiceNum();\r\n            tableData[i][1] = items.get(i).getItemName();\r\n            tableData[i][2] = items.get(i).getItemPrice();\r\n            tableData[i][3] = items.get(i).getCount();\r\n            double itemTotal = items.get(i).getItemPrice() * items.get(i).getCount();\r\n            tableData[i][4] = itemTotal;\r\n\r\n        }\r\n\r\n        return tableData;\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/controller/MouseAction.java b/src/controller/MouseAction.java
--- a/src/controller/MouseAction.java	(revision 36ea7b1b8064afe9f43cbf3196158918d44658a9)
+++ b/src/controller/MouseAction.java	(date 1666301144419)
@@ -1,8 +1,9 @@
 package controller;
 
-import model.InvoiceHeader;
-import model.InvoiceLines;
-import view.InvoiceFrame;
+import model.HeaderTable;
+import model.LineTable;
+import view.SigInvoiceFrame;
+
 import javax.swing.table.DefaultTableModel;
 import java.awt.event.MouseAdapter;
 import java.awt.event.MouseEvent;
@@ -10,35 +11,35 @@
 import java.util.ArrayList;
 
 
-public class MouseHandler extends MouseAdapter {
+public class MouseAction extends MouseAdapter {
 
     @Override
     public void mouseClicked(MouseEvent e) {
 
         SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
-        int selectedInvoice = InvoiceFrame.invoicesTable.getSelectedRow() + 1;
-        ArrayList<InvoiceLines> invoiceItems;
-        for (InvoiceHeader invoice : InvoiceFrame.invoices) {
+        int selectedInvoice = SigInvoiceFrame.invoicesTable.getSelectedRow() + 1;
+        ArrayList<LineTable> invoiceItems;
+        for (HeaderTable invoice : SigInvoiceFrame.invoices) {
             if (invoice.getInvoiceNum() == selectedInvoice) {
 
-                InvoiceFrame.invoiceNumLbl.setText(String.valueOf(invoice.getInvoiceNum()));
-                InvoiceFrame.invoiceDateTxtField.setText(sdf.format(invoice.getInvoiceDate()));
-                InvoiceFrame.customerNameTxtField.setText(invoice.getCustomerName());
+                SigInvoiceFrame.invoiceNumLbl.setText(String.valueOf(invoice.getInvoiceNum()));
+                SigInvoiceFrame.invoiceDateTxtField.setText(sdf.format(invoice.getInvoiceDate()));
+                SigInvoiceFrame.customerNameTxtField.setText(invoice.getCustomerName());
                 double total = 0.0;
                 if (invoice.getInvoiceLines() != null) {
-                    for (InvoiceLines item : invoice.getInvoiceLines()) {
+                    for (LineTable item : invoice.getInvoiceLines()) {
                         total += item.getItemPrice() * item.getCount();
                     }
 
-                    InvoiceFrame.invoiceTotalLbl.setText(String.valueOf(total));
+                    SigInvoiceFrame.invoiceTotalLbl.setText(String.valueOf(total));
                     invoiceItems = invoice.getInvoiceLines();
                     Object[][] table2Data = getInvoiceItemsTableData(invoiceItems);
-                    InvoiceFrame.itemsTable.setModel(new DefaultTableModel(table2Data,
+                    SigInvoiceFrame.itemsTable.setModel(new DefaultTableModel(table2Data,
                             new String[]{"No.", "Item Name", "Item Price", "Count", "Item Total"}));
                 } else {
-                    InvoiceFrame.invoiceTotalLbl.setText(String.valueOf(total));
+                    SigInvoiceFrame.invoiceTotalLbl.setText(String.valueOf(total));
 
-                    InvoiceFrame.itemsTable.setModel(new javax.swing.table.DefaultTableModel(
+                    SigInvoiceFrame.itemsTable.setModel(new javax.swing.table.DefaultTableModel(
                             new Object[][]{
 
                             },
@@ -47,7 +48,7 @@
                             }
                     ));
 
-                    InvoiceFrame.itemsTable.setModel(new DefaultTableModel(new Object[][]{},
+                    SigInvoiceFrame.itemsTable.setModel(new DefaultTableModel(new Object[][]{},
                             new String[]{"No.", "Item Name", "Item Price", "Count", "Item Total"}));
 
                 }
@@ -57,7 +58,7 @@
     }
 
     // Helper Method
-    private Object[][] getInvoiceItemsTableData(ArrayList<InvoiceLines> items) {
+    private Object[][] getInvoiceItemsTableData(ArrayList<LineTable> items) {
 
         Object[][] tableData = new Object[items.size()][5];
         for (int i = 0; i < items.size(); i++) {
Index: src/model/LineTable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\npublic class InvoiceLines {\r\n\r\n    // == Fields ==\r\n    private HeaderTable invoice;\r\n    private String itemName;\r\n    private double itemPrice;\r\n    private int count;\r\n\r\n    // == Constructors ==\r\n    public InvoiceLines(HeaderTable invoice, String itemName, double itemPrice, int count) {\r\n        this.invoice = invoice;\r\n        this.itemName = itemName;\r\n        this.itemPrice = itemPrice;\r\n        this.count = count;\r\n    }\r\n\r\n    // == Getter and Setter Methods ==\r\n    public HeaderTable getInvoice() {\r\n        return invoice;\r\n    }\r\n\r\n    public void setInvoice(HeaderTable invoice) {\r\n        this.invoice = invoice;\r\n    }\r\n\r\n    public String getItemName() {\r\n        return itemName;\r\n    }\r\n\r\n    public void setItemName(String itemName) {\r\n        this.itemName = itemName;\r\n    }\r\n\r\n    public double getItemPrice() {\r\n        return itemPrice;\r\n    }\r\n\r\n    public void setItemPrice(double itemPrice) {\r\n        this.itemPrice = itemPrice;\r\n    }\r\n\r\n    public int getCount() {\r\n        return count;\r\n    }\r\n\r\n    public void setCount(int count) {\r\n        this.count = count;\r\n    }\r\n\r\n    // == toString method ==\r\n    @Override\r\n    public String toString() {\r\n        return \"\\t\" + \"InvoiceLine{itemName=\" + itemName + \", itemPrice=\" + itemPrice + \", count=\" + count + \"}\\n\\t\";\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/LineTable.java b/src/model/LineTable.java
--- a/src/model/LineTable.java	(revision 36ea7b1b8064afe9f43cbf3196158918d44658a9)
+++ b/src/model/LineTable.java	(date 1666302358808)
@@ -1,6 +1,6 @@
 package model;
 
-public class InvoiceLines {
+public class LineTable {
 
     // == Fields ==
     private HeaderTable invoice;
@@ -9,7 +9,7 @@
     private int count;
 
     // == Constructors ==
-    public InvoiceLines(HeaderTable invoice, String itemName, double itemPrice, int count) {
+    public LineTable(HeaderTable invoice, String itemName, double itemPrice, int count) {
         this.invoice = invoice;
         this.itemName = itemName;
         this.itemPrice = itemPrice;
@@ -52,7 +52,8 @@
     // == toString method ==
     @Override
     public String toString() {
-        return "\t" + "InvoiceLine{itemName=" + itemName + ", itemPrice=" + itemPrice + ", count=" + count + "}\n\t";
+        return "\t" + "InvoiceLine{itemName=" + itemName + ", itemPrice="
+                + itemPrice + ", count=" + count + "}\n\t";
     }
 
 }
Index: src/model/HeaderTable.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package model;\r\n\r\nimport java.text.SimpleDateFormat;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\n\r\npublic class InvoiceHeader {\r\n\r\n    // == Fields ==\r\n    private int invoiceNum;\r\n    private Date invoiceDate;\r\n    private String customerName;\r\n    private ArrayList<InvoiceLines> invoiceLines;\r\n\r\n    // == Constructors ==\r\n    public InvoiceHeader(int invoiceNum, Date invoiceDate, String customerName) {\r\n        this.invoiceNum = invoiceNum;\r\n        this.invoiceDate = invoiceDate;\r\n        this.customerName = customerName;\r\n    }\r\n\r\n    // == Getter and Setter Methods ==\r\n    public int getInvoiceNum() {\r\n        return invoiceNum;\r\n    }\r\n\r\n    public void setInvoiceNum(int invoiceNum) {\r\n        this.invoiceNum = invoiceNum;\r\n    }\r\n\r\n    public Date getInvoiceDate() {\r\n        return invoiceDate;\r\n    }\r\n\r\n    public void setInvoiceDate(Date invoiceDate) {\r\n        this.invoiceDate = invoiceDate;\r\n    }\r\n\r\n    public String getCustomerName() {\r\n        return customerName;\r\n    }\r\n\r\n    public void setCustomerName(String customerName) {\r\n        this.customerName = customerName;\r\n    }\r\n\r\n    public ArrayList<InvoiceLines> getInvoiceLines() {\r\n        return invoiceLines;\r\n    }\r\n\r\n    public void setInvoiceLines(ArrayList<InvoiceLines> invoiceLines) {\r\n        this.invoiceLines = invoiceLines;\r\n    }\r\n\r\n    // == toString method ==\r\n    @Override\r\n    public String toString() {\r\n        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\r\n        String date = sdf.format(invoiceDate);\r\n        return \"InvoiceHeader{\" + \"invoiceNum=\" + invoiceNum + \", invoiceDate=\" + date + \", customerName=\" + customerName + \",\\ninvoiceLines=\" + invoiceLines + '}';\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/model/HeaderTable.java b/src/model/HeaderTable.java
--- a/src/model/HeaderTable.java	(revision 36ea7b1b8064afe9f43cbf3196158918d44658a9)
+++ b/src/model/HeaderTable.java	(date 1666302267496)
@@ -4,22 +4,17 @@
 import java.util.ArrayList;
 import java.util.Date;
 
-public class InvoiceHeader {
-
-    // == Fields ==
+public class HeaderTable {
     private int invoiceNum;
     private Date invoiceDate;
     private String customerName;
-    private ArrayList<InvoiceLines> invoiceLines;
-
-    // == Constructors ==
-    public InvoiceHeader(int invoiceNum, Date invoiceDate, String customerName) {
+    private ArrayList<LineTable> invoiceLines;
+    public HeaderTable(int invoiceNum, Date invoiceDate, String customerName) {
         this.invoiceNum = invoiceNum;
         this.invoiceDate = invoiceDate;
         this.customerName = customerName;
     }
 
-    // == Getter and Setter Methods ==
     public int getInvoiceNum() {
         return invoiceNum;
     }
@@ -32,32 +27,24 @@
         return invoiceDate;
     }
 
-    public void setInvoiceDate(Date invoiceDate) {
-        this.invoiceDate = invoiceDate;
-    }
-
     public String getCustomerName() {
         return customerName;
     }
 
-    public void setCustomerName(String customerName) {
-        this.customerName = customerName;
-    }
-
-    public ArrayList<InvoiceLines> getInvoiceLines() {
+    public ArrayList<LineTable> getInvoiceLines() {
         return invoiceLines;
     }
 
-    public void setInvoiceLines(ArrayList<InvoiceLines> invoiceLines) {
+    public void setInvoiceLines(ArrayList<LineTable> invoiceLines) {
         this.invoiceLines = invoiceLines;
     }
-
-    // == toString method ==
     @Override
     public String toString() {
         SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
         String date = sdf.format(invoiceDate);
-        return "InvoiceHeader{" + "invoiceNum=" + invoiceNum + ", invoiceDate=" + date + ", customerName=" + customerName + ",\ninvoiceLines=" + invoiceLines + '}';
+        return "HeaderTable{" + "invoiceNum=" + invoiceNum + ", invoiceDate="
+                + date + ", customerName=" + customerName
+                + ",\ninvoiceLines=" + invoiceLines + '}';
     }
 
 }
Index: src/view/AddNewInvoiceDialog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\n\r\npublic class NewInvoiceDialog extends javax.swing.JDialog {\r\n    private javax.swing.JButton addBtn;\r\n    private javax.swing.JButton cancelBtn;\r\n    private javax.swing.JTextField customerNameTxtField;\r\n    private javax.swing.JTextField dateTxtField;\r\n    private javax.swing.JLabel jLabel1;\r\n    private javax.swing.JLabel jLabel2;\r\n    private javax.swing.JLabel jLabel3;\r\n    private javax.swing.JPanel jPanel1;\r\n    public NewInvoiceDialog(java.awt.Frame parent, boolean modal) {\r\n        super(parent, modal);\r\n\r\n        initComponents();\r\n        addBtn.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                setInvoiceDate(dateTxtField.getText());\r\n                setCustomerName(customerNameTxtField.getText());\r\n                setVisible(false);\r\n\r\n            }\r\n        });\r\n\r\n        cancelBtn.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                setVisible(false);\r\n            }\r\n        });\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\n    private void initComponents() {\r\n\r\n        jPanel1 = new javax.swing.JPanel();\r\n        jLabel1 = new javax.swing.JLabel();\r\n        jLabel2 = new javax.swing.JLabel();\r\n        dateTxtField = new javax.swing.JTextField();\r\n        customerNameTxtField = new javax.swing.JTextField();\r\n        addBtn = new javax.swing.JButton();\r\n        cancelBtn = new javax.swing.JButton();\r\n        jLabel3 = new javax.swing.JLabel();\r\n\r\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\r\n        setTitle(\"New Invoice\");\r\n        setLocation(new java.awt.Point(200, 300));\r\n\r\n        jLabel1.setText(\"Date\");\r\n\r\n        jLabel2.setText(\"Customer Name\");\r\n\r\n        addBtn.setText(\"Add\");\r\n\r\n        cancelBtn.setText(\"Cancel\");\r\n\r\n        jLabel3.setFont(new java.awt.Font(\"Segoe UI\", 0, 10)); // NOI18N\r\n        jLabel3.setText(\"(DD-MM-YYY)\");\r\n\r\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\r\n        jPanel1.setLayout(jPanel1Layout);\r\n        jPanel1Layout.setHorizontalGroup(\r\n                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addGroup(jPanel1Layout.createSequentialGroup()\r\n                                .addContainerGap()\r\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n                                        .addComponent(jLabel2))\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\r\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\r\n                                        .addComponent(customerNameTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)\r\n                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\r\n                                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)\r\n                                                .addComponent(dateTxtField)))\r\n                                .addContainerGap())\r\n                        .addGroup(jPanel1Layout.createSequentialGroup()\r\n                                .addGap(42, 42, 42)\r\n                                .addComponent(addBtn)\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 94, Short.MAX_VALUE)\r\n                                .addComponent(cancelBtn)\r\n                                .addGap(63, 63, 63))\r\n        );\r\n        jPanel1Layout.setVerticalGroup(\r\n                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addGroup(jPanel1Layout.createSequentialGroup()\r\n                                .addGap(19, 19, 19)\r\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\r\n                                        .addComponent(jLabel1)\r\n                                        .addComponent(dateTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\r\n                                .addComponent(jLabel3)\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\r\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\r\n                                        .addComponent(jLabel2)\r\n                                        .addComponent(customerNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\r\n                                .addGap(18, 18, 18)\r\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\r\n                                        .addComponent(addBtn)\r\n                                        .addComponent(cancelBtn))\r\n                                .addContainerGap(37, Short.MAX_VALUE))\r\n        );\r\n\r\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\r\n        getContentPane().setLayout(layout);\r\n        layout.setHorizontalGroup(\r\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\r\n                                .addContainerGap()\r\n                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\r\n                                .addContainerGap())\r\n        );\r\n        layout.setVerticalGroup(\r\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addGroup(layout.createSequentialGroup()\r\n                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\r\n                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\r\n        );\r\n\r\n        pack();\r\n    }// </editor-fold>//GEN-END:initComponents\r\n\r\n    private String invoiceDate;\r\n    private String customerName;\r\n\r\n    public String getInvoiceDate() {\r\n        return invoiceDate;\r\n    }\r\n\r\n    public void setInvoiceDate(String invoiceDate) {\r\n        this.invoiceDate = invoiceDate;\r\n    }\r\n\r\n    public String getCustomerName() {\r\n        return customerName;\r\n    }\r\n\r\n    public void setCustomerName(String customerName) {\r\n        this.customerName = customerName;\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/AddNewInvoiceDialog.java b/src/view/AddNewInvoiceDialog.java
--- a/src/view/AddNewInvoiceDialog.java	(revision 36ea7b1b8064afe9f43cbf3196158918d44658a9)
+++ b/src/view/AddNewInvoiceDialog.java	(date 1666301144395)
@@ -3,7 +3,7 @@
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
 
-public class NewInvoiceDialog extends javax.swing.JDialog {
+public class AddNewInvoiceDialog extends javax.swing.JDialog {
     private javax.swing.JButton addBtn;
     private javax.swing.JButton cancelBtn;
     private javax.swing.JTextField customerNameTxtField;
@@ -12,7 +12,7 @@
     private javax.swing.JLabel jLabel2;
     private javax.swing.JLabel jLabel3;
     private javax.swing.JPanel jPanel1;
-    public NewInvoiceDialog(java.awt.Frame parent, boolean modal) {
+    public AddNewInvoiceDialog(java.awt.Frame parent, boolean modal) {
         super(parent, modal);
 
         initComponents();
Index: src/view/SigInvoiceFrame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package view;\r\n\r\nimport controller.MouseAction;\r\nimport controller.ButtonAction;\r\nimport model.HeaderTable;\r\n\r\nimport java.util.ArrayList;\r\n\r\npublic class InvoiceFrame extends javax.swing.JFrame {\r\n    private javax.swing.JButton deleteItemBtn;\r\n    private javax.swing.JButton createInvoiceBtn;\r\n    public static javax.swing.JTextField customerNameTxtField;\r\n    private javax.swing.JButton deleteInvoiceBtn;\r\n    public static javax.swing.JTextField invoiceDateTxtField;\r\n    public static javax.swing.JLabel invoiceNumLbl;\r\n    public static javax.swing.JLabel invoiceTotalLbl;\r\n    public static javax.swing.JTable invoicesTable;\r\n    public static javax.swing.JTable itemsTable;\r\n    private javax.swing.JLabel jLabel1;\r\n    private javax.swing.JLabel jLabel2;\r\n    private javax.swing.JLabel jLabel4;\r\n    private javax.swing.JLabel jLabel5;\r\n    private javax.swing.JLabel jLabel6;\r\n    private javax.swing.JLabel jLabel8;\r\n    private javax.swing.JMenu jMenu1;\r\n    private javax.swing.JMenuBar jMenuBar1;\r\n    private javax.swing.JPanel jPanel1;\r\n    private javax.swing.JPanel jPanel2;\r\n    private javax.swing.JScrollPane jScrollPane1;\r\n    private javax.swing.JScrollPane jScrollPane2;\r\n    public static javax.swing.JMenuItem loadFileMenuItem;\r\n    private javax.swing.JButton saveBtn;\r\n    public static javax.swing.JMenuItem saveFileMenuItem;\r\n    public InvoiceFrame() {\r\n\r\n        initComponents();\r\n\r\n        createInvoiceBtn.addActionListener(actionHandler);\r\n        deleteInvoiceBtn.addActionListener(actionHandler);\r\n        deleteInvoiceBtn.addActionListener(actionHandler);\r\n        saveBtn.addActionListener(actionHandler);\r\n        deleteItemBtn.addActionListener(actionHandler);\r\n        loadFileMenuItem.addActionListener(actionHandler);\r\n        saveFileMenuItem.addActionListener(actionHandler);\r\n        invoicesTable.addMouseListener(mouseHandler);\r\n        setLocation(550, 250);\r\n\r\n\r\n    }\r\n\r\n    @SuppressWarnings(\"unchecked\")\r\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\r\n    private void initComponents() {\r\n\r\n        jPanel1 = new javax.swing.JPanel();\r\n        jLabel1 = new javax.swing.JLabel();\r\n        jScrollPane1 = new javax.swing.JScrollPane();\r\n        invoicesTable = new javax.swing.JTable();\r\n        createInvoiceBtn = new javax.swing.JButton();\r\n        deleteInvoiceBtn = new javax.swing.JButton();\r\n        jPanel2 = new javax.swing.JPanel();\r\n        jLabel2 = new javax.swing.JLabel();\r\n        invoiceNumLbl = new javax.swing.JLabel();\r\n        jLabel4 = new javax.swing.JLabel();\r\n        jLabel5 = new javax.swing.JLabel();\r\n        jLabel6 = new javax.swing.JLabel();\r\n        invoiceDateTxtField = new javax.swing.JTextField();\r\n        customerNameTxtField = new javax.swing.JTextField();\r\n        invoiceTotalLbl = new javax.swing.JLabel();\r\n        jLabel8 = new javax.swing.JLabel();\r\n        jScrollPane2 = new javax.swing.JScrollPane();\r\n        itemsTable = new javax.swing.JTable();\r\n        saveBtn = new javax.swing.JButton();\r\n        deleteItemBtn = new javax.swing.JButton();\r\n        jMenuBar1 = new javax.swing.JMenuBar();\r\n        jMenu1 = new javax.swing.JMenu();\r\n        loadFileMenuItem = new javax.swing.JMenuItem();\r\n        saveFileMenuItem = new javax.swing.JMenuItem();\r\n\r\n        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);\r\n        setTitle(\"Sales Invoice Generator\");\r\n\r\n        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));\r\n\r\n        jLabel1.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\r\n        jLabel1.setText(\"Invoices Table\");\r\n\r\n        invoicesTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));\r\n        invoicesTable.setModel(new javax.swing.table.DefaultTableModel(\r\n                new Object [][] {\r\n\r\n                },\r\n                new String [] {\r\n                        \"No.\", \"Date\", \"Customer\", \"Total\"\r\n                }\r\n        ));\r\n        invoicesTable.setName(\"\"); // NOI18N\r\n        invoicesTable.setShowGrid(true);\r\n        jScrollPane1.setViewportView(invoicesTable);\r\n\r\n        createInvoiceBtn.setText(\"Create New Invoice\");\r\n\r\n        deleteInvoiceBtn.setText(\"Delete Invoice\");\r\n\r\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\r\n        jPanel1.setLayout(jPanel1Layout);\r\n        jPanel1Layout.setHorizontalGroup(\r\n                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addGroup(jPanel1Layout.createSequentialGroup()\r\n                                .addContainerGap()\r\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                                        .addGroup(jPanel1Layout.createSequentialGroup()\r\n                                                .addComponent(jLabel1)\r\n                                                .addGap(0, 0, Short.MAX_VALUE))\r\n                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))\r\n                                .addContainerGap())\r\n                        .addGroup(jPanel1Layout.createSequentialGroup()\r\n                                .addGap(34, 34, 34)\r\n                                .addComponent(createInvoiceBtn)\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)\r\n                                .addComponent(deleteInvoiceBtn)\r\n                                .addGap(49, 49, 49))\r\n        );\r\n        jPanel1Layout.setVerticalGroup(\r\n                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addGroup(jPanel1Layout.createSequentialGroup()\r\n                                .addContainerGap()\r\n                                .addComponent(jLabel1)\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\r\n                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\r\n                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\r\n                                        .addComponent(createInvoiceBtn)\r\n                                        .addComponent(deleteInvoiceBtn))\r\n                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\r\n        );\r\n\r\n        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));\r\n\r\n        jLabel2.setBackground(new java.awt.Color(255, 255, 255));\r\n        jLabel2.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\r\n        jLabel2.setText(\"Invoice Number\");\r\n\r\n        invoiceNumLbl.setBackground(new java.awt.Color(255, 255, 255));\r\n        invoiceNumLbl.setText(\"0\");\r\n\r\n        jLabel4.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\r\n        jLabel4.setText(\"Invoice Date\");\r\n\r\n        jLabel5.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\r\n        jLabel5.setText(\"Customer Name\");\r\n\r\n        jLabel6.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\r\n        jLabel6.setText(\"Invoice Total\");\r\n\r\n        invoiceDateTxtField.setDisabledTextColor(new java.awt.Color(0, 0, 0));\r\n        invoiceDateTxtField.setEnabled(false);\r\n\r\n        customerNameTxtField.setDisabledTextColor(new java.awt.Color(0, 0, 0));\r\n        customerNameTxtField.setEnabled(false);\r\n\r\n        invoiceTotalLbl.setText(\"0.0\");\r\n\r\n        jLabel8.setFont(new java.awt.Font(\"Segoe UI\", 1, 12)); // NOI18N\r\n        jLabel8.setText(\"Invoice's Items Table\");\r\n\r\n        itemsTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));\r\n        itemsTable.setModel(new javax.swing.table.DefaultTableModel(\r\n                new Object [][] {\r\n\r\n                },\r\n                new String [] {\r\n                        \"No.\", \"Item Name\", \"Item Price\", \"Count\", \"Item Total\"\r\n                }\r\n        ));\r\n        itemsTable.setShowGrid(true);\r\n        jScrollPane2.setViewportView(itemsTable);\r\n\r\n        saveBtn.setText(\"Add item\");\r\n\r\n        deleteItemBtn.setText(\"Delete item\");\r\n\r\n        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);\r\n        jPanel2.setLayout(jPanel2Layout);\r\n        jPanel2Layout.setHorizontalGroup(\r\n                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addGroup(jPanel2Layout.createSequentialGroup()\r\n                                .addContainerGap()\r\n                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\r\n                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n                                        .addGroup(jPanel2Layout.createSequentialGroup()\r\n                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                                                        .addComponent(jLabel2)\r\n                                                        .addComponent(jLabel4)\r\n                                                        .addComponent(jLabel5)\r\n                                                        .addComponent(jLabel6)\r\n                                                        .addComponent(jLabel8))\r\n                                                .addGap(30, 30, 30)\r\n                                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                                                        .addComponent(invoiceDateTxtField)\r\n                                                        .addComponent(customerNameTxtField)\r\n                                                        .addComponent(invoiceTotalLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\r\n                                                        .addComponent(invoiceNumLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))\r\n                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\r\n                        .addGroup(jPanel2Layout.createSequentialGroup()\r\n                                .addGap(73, 73, 73)\r\n                                .addComponent(saveBtn)\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\r\n                                .addComponent(deleteItemBtn)\r\n                                .addGap(66, 66, 66))\r\n        );\r\n        jPanel2Layout.setVerticalGroup(\r\n                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addGroup(jPanel2Layout.createSequentialGroup()\r\n                                .addContainerGap()\r\n                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\r\n                                        .addComponent(jLabel2)\r\n                                        .addComponent(invoiceNumLbl))\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\r\n                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\r\n                                        .addComponent(jLabel4)\r\n                                        .addComponent(invoiceDateTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\r\n                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                                        .addComponent(jLabel5)\r\n                                        .addComponent(customerNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\r\n                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                                        .addComponent(jLabel6)\r\n                                        .addComponent(invoiceTotalLbl))\r\n                                .addGap(18, 18, 18)\r\n                                .addComponent(jLabel8)\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\r\n                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\r\n                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\r\n                                        .addComponent(saveBtn)\r\n                                        .addComponent(deleteItemBtn))\r\n                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\r\n        );\r\n\r\n        jMenu1.setText(\"File\");\r\n\r\n        loadFileMenuItem.setText(\"Load File\");\r\n        jMenu1.add(loadFileMenuItem);\r\n\r\n        saveFileMenuItem.setText(\"Save File\");\r\n        jMenu1.add(saveFileMenuItem);\r\n\r\n        jMenuBar1.add(jMenu1);\r\n\r\n        setJMenuBar(jMenuBar1);\r\n\r\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\r\n        getContentPane().setLayout(layout);\r\n        layout.setHorizontalGroup(\r\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addGroup(layout.createSequentialGroup()\r\n                                .addContainerGap()\r\n                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\r\n                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\r\n        );\r\n        layout.setVerticalGroup(\r\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                        .addGroup(layout.createSequentialGroup()\r\n                                .addContainerGap()\r\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\r\n                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\r\n                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\r\n                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\r\n        );\r\n\r\n        pack();\r\n    }// </editor-fold>//GEN-END:initComponents\r\n\r\n    public static void main(String args[]) {\r\n        /* Set the Nimbus look and feel */\r\n        //<editor-fold defaultstate=\"collapsed\" desc=\" Look and feel setting code (optional) \">\r\n        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.\r\n         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html\r\n         */\r\n        try {\r\n            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {\r\n                if (\"Nimbus\".equals(info.getName())) {\r\n                    javax.swing.UIManager.setLookAndFeel(info.getClassName());\r\n                    break;\r\n                }\r\n            }\r\n        } catch (ClassNotFoundException ex) {\r\n            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\r\n        } catch (InstantiationException ex) {\r\n            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\r\n        } catch (IllegalAccessException ex) {\r\n            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\r\n        } catch (javax.swing.UnsupportedLookAndFeelException ex) {\r\n            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);\r\n        }\r\n        //</editor-fold>\r\n\r\n        /* Create and display the form */\r\n        java.awt.EventQueue.invokeLater(new Runnable() {\r\n            @Override\r\n            public void run() {\r\n\r\n                new InvoiceFrame().setVisible(true);\r\n            }\r\n        });\r\n    }\r\n\r\n    public static ArrayList<HeaderTable> invoices = new ArrayList<>();\r\n    controller.ButtonAction actionHandler = new ButtonAction();\r\n    MouseAction mouseHandler = new MouseAction();\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/view/SigInvoiceFrame.java b/src/view/SigInvoiceFrame.java
--- a/src/view/SigInvoiceFrame.java	(revision 36ea7b1b8064afe9f43cbf3196158918d44658a9)
+++ b/src/view/SigInvoiceFrame.java	(date 1666305911020)
@@ -6,8 +6,8 @@
 
 import java.util.ArrayList;
 
-public class InvoiceFrame extends javax.swing.JFrame {
-    private javax.swing.JButton deleteItemBtn;
+public class SigInvoiceFrame extends javax.swing.JFrame {
+    private javax.swing.JButton cancelBtn;
     private javax.swing.JButton createInvoiceBtn;
     public static javax.swing.JTextField customerNameTxtField;
     private javax.swing.JButton deleteInvoiceBtn;
@@ -31,19 +31,19 @@
     public static javax.swing.JMenuItem loadFileMenuItem;
     private javax.swing.JButton saveBtn;
     public static javax.swing.JMenuItem saveFileMenuItem;
-    public InvoiceFrame() {
+
+    public SigInvoiceFrame() {
 
         initComponents();
 
         createInvoiceBtn.addActionListener(actionHandler);
         deleteInvoiceBtn.addActionListener(actionHandler);
-        deleteInvoiceBtn.addActionListener(actionHandler);
         saveBtn.addActionListener(actionHandler);
-        deleteItemBtn.addActionListener(actionHandler);
+        cancelBtn.addActionListener(actionHandler);
         loadFileMenuItem.addActionListener(actionHandler);
         saveFileMenuItem.addActionListener(actionHandler);
         invoicesTable.addMouseListener(mouseHandler);
-        setLocation(550, 250);
+        setLocation(200, 100);
 
 
     }
@@ -71,7 +71,7 @@
         jScrollPane2 = new javax.swing.JScrollPane();
         itemsTable = new javax.swing.JTable();
         saveBtn = new javax.swing.JButton();
-        deleteItemBtn = new javax.swing.JButton();
+        cancelBtn = new javax.swing.JButton();
         jMenuBar1 = new javax.swing.JMenuBar();
         jMenu1 = new javax.swing.JMenu();
         loadFileMenuItem = new javax.swing.JMenuItem();
@@ -87,14 +87,14 @@
 
         invoicesTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
         invoicesTable.setModel(new javax.swing.table.DefaultTableModel(
-                new Object [][] {
+                new Object[][]{
 
                 },
-                new String [] {
-                        "No.", "Date", "Customer", "Total"
+                new String[]{
+                        "No.", "Invoice Date", "Customer Name", "Total"
                 }
         ));
-        invoicesTable.setName(""); // NOI18N
+        invoicesTable.setName("");
         invoicesTable.setShowGrid(true);
         jScrollPane1.setViewportView(invoicesTable);
 
@@ -162,23 +162,23 @@
         invoiceTotalLbl.setText("0.0");
 
         jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
-        jLabel8.setText("Invoice's Items Table");
+        jLabel8.setText("Invoice's Items");
 
         itemsTable.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
         itemsTable.setModel(new javax.swing.table.DefaultTableModel(
-                new Object [][] {
+                new Object[][]{
 
                 },
-                new String [] {
+                new String[]{
                         "No.", "Item Name", "Item Price", "Count", "Item Total"
                 }
         ));
         itemsTable.setShowGrid(true);
         jScrollPane2.setViewportView(itemsTable);
 
-        saveBtn.setText("Add item");
+        saveBtn.setText("Save");
 
-        deleteItemBtn.setText("Delete item");
+        cancelBtn.setText("Cancel");
 
         javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
         jPanel2.setLayout(jPanel2Layout);
@@ -206,7 +206,7 @@
                                 .addGap(73, 73, 73)
                                 .addComponent(saveBtn)
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
-                                .addComponent(deleteItemBtn)
+                                .addComponent(cancelBtn)
                                 .addGap(66, 66, 66))
         );
         jPanel2Layout.setVerticalGroup(
@@ -235,7 +235,7 @@
                                 .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                 .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                         .addComponent(saveBtn)
-                                        .addComponent(deleteItemBtn))
+                                        .addComponent(cancelBtn))
                                 .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
         );
 
@@ -289,13 +289,13 @@
                 }
             }
         } catch (ClassNotFoundException ex) {
-            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+            java.util.logging.Logger.getLogger(SigInvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (InstantiationException ex) {
-            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+            java.util.logging.Logger.getLogger(SigInvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (IllegalAccessException ex) {
-            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+            java.util.logging.Logger.getLogger(SigInvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         } catch (javax.swing.UnsupportedLookAndFeelException ex) {
-            java.util.logging.Logger.getLogger(InvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+            java.util.logging.Logger.getLogger(SigInvoiceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
         }
         //</editor-fold>
 
@@ -304,7 +304,7 @@
             @Override
             public void run() {
 
-                new InvoiceFrame().setVisible(true);
+                new SigInvoiceFrame().setVisible(true);
             }
         });
     }
@@ -314,5 +314,4 @@
     MouseAction mouseHandler = new MouseAction();
 
 
-
 }
Index: invoices/InvoiceLine.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/invoices/InvoiceLine.csv b/invoices/InvoiceLine.csv
new file mode 100644
--- /dev/null	(date 1666305341468)
+++ b/invoices/InvoiceLine.csv	(date 1666305341468)
@@ -0,0 +1,7 @@
+1,Mobile,6000,2
+1,Cover,100,2
+1,TV,2000,2
+1,Headphone,200,1
+2,Laptop,10000,2
+2,Mouse,100,2
+2,Stopwatch400,100,2
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"6579e058-3e42-4db7-b15f-da5885100fe9\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2GPka6usFk4Pv1c8kvUKGLLaizE\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"6579e058-3e42-4db7-b15f-da5885100fe9\" name=\"Changes\" comment=\"\" />\r\n      <created>1666297678224</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1666297678224</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 36ea7b1b8064afe9f43cbf3196158918d44658a9)
+++ b/.idea/workspace.xml	(date 1666306495774)
@@ -1,12 +1,40 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="AutoImportSettings">
+    <option name="autoReloadType" value="SELECTIVE" />
+  </component>
   <component name="ChangeListManager">
-    <list default="true" id="6579e058-3e42-4db7-b15f-da5885100fe9" name="Changes" comment="" />
+    <list default="true" id="6579e058-3e42-4db7-b15f-da5885100fe9" name="Changes" comment="">
+      <change afterPath="$PROJECT_DIR$/ConsoleOutputScreenShot/AfterAddInvoice.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/ConsoleOutputScreenShot/BeforeSubmitNewImvoice.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/invoices/InvoiceHeader.csv" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/invoices/InvoiceLine.csv" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/controller/ButtonAction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/controller/ButtonAction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/controller/MouseAction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/controller/MouseAction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/model/HeaderTable.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/model/HeaderTable.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/model/LineTable.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/model/LineTable.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/view/AddNewInvoiceDialog.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/AddNewInvoiceDialog.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/view/SigInvoiceFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/view/SigInvoiceFrame.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
   </component>
+  <component name="FileTemplateManagerImpl">
+    <option name="RECENT_TEMPLATES">
+      <list>
+        <option value="Class" />
+      </list>
+    </option>
+  </component>
+  <component name="Git.Settings">
+    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
+  </component>
+  <component name="MarkdownSettingsMigration">
+    <option name="stateVersion" value="1" />
+  </component>
   <component name="ProjectId" id="2GPka6usFk4Pv1c8kvUKGLLaizE" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
   <component name="ProjectViewState">
@@ -16,9 +44,33 @@
   <component name="PropertiesComponent"><![CDATA[{
   "keyToString": {
     "RunOnceActivity.OpenProjectViewOnStart": "true",
-    "RunOnceActivity.ShowReadmeOnStart": "true"
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
+    "last_opened_file_path": "D:/Udacity-Fwd-Projects/FirstFwdProject"
   }
 }]]></component>
+  <component name="RunManager">
+    <configuration name="SigInvoiceFrame" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
+      <option name="ALTERNATIVE_JRE_PATH" value="19" />
+      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="true" />
+      <option name="MAIN_CLASS_NAME" value="view.SigInvoiceFrame" />
+      <module name="FirstFwdProject" />
+      <extension name="coverage">
+        <pattern>
+          <option name="PATTERN" value="view.*" />
+          <option name="ENABLED" value="true" />
+        </pattern>
+      </extension>
+      <method v="2">
+        <option name="Make" enabled="true" />
+      </method>
+    </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Application.SigInvoiceFrame" />
+      </list>
+    </recent_temporary>
+  </component>
   <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
Index: invoices/InvoiceHeader.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/invoices/InvoiceHeader.csv b/invoices/InvoiceHeader.csv
new file mode 100644
--- /dev/null	(date 1666305243157)
+++ b/invoices/InvoiceHeader.csv	(date 1666305243157)
@@ -0,0 +1,2 @@
+1,28-04-2016,Rana
+2,22-10-2018,Ahmed
